"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class low_cmd_t(object):

    __slots__ = ["timestamp", "q", "dq", "tau", "kp", "kd", "enable", "calibrate"]

    __typenames__ = ["int64_t", "float", "float", "float", "float", "float", "boolean", "boolean"]

    __dimensions__ = [None, [18], [18], [18], [18], [18], [18], [18]]

    def __init__(self):
        self.timestamp = 0
        """ LCM Type: int64_t """
        self.q = [ 0.0 for dim0 in range(18) ]
        """ LCM Type: float[18] """
        self.dq = [ 0.0 for dim0 in range(18) ]
        """ LCM Type: float[18] """
        self.tau = [ 0.0 for dim0 in range(18) ]
        """ LCM Type: float[18] """
        self.kp = [ 0.0 for dim0 in range(18) ]
        """ LCM Type: float[18] """
        self.kd = [ 0.0 for dim0 in range(18) ]
        """ LCM Type: float[18] """
        self.enable = [ False for dim0 in range(18) ]
        """ LCM Type: boolean[18] """
        self.calibrate = [ False for dim0 in range(18) ]
        """ LCM Type: boolean[18] """

    def encode(self):
        buf = BytesIO()
        buf.write(low_cmd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        buf.write(struct.pack('>18f', *self.q[:18]))
        buf.write(struct.pack('>18f', *self.dq[:18]))
        buf.write(struct.pack('>18f', *self.tau[:18]))
        buf.write(struct.pack('>18f', *self.kp[:18]))
        buf.write(struct.pack('>18f', *self.kd[:18]))
        buf.write(struct.pack('>18b', *self.enable[:18]))
        buf.write(struct.pack('>18b', *self.calibrate[:18]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != low_cmd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return low_cmd_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = low_cmd_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.q = struct.unpack('>18f', buf.read(72))
        self.dq = struct.unpack('>18f', buf.read(72))
        self.tau = struct.unpack('>18f', buf.read(72))
        self.kp = struct.unpack('>18f', buf.read(72))
        self.kd = struct.unpack('>18f', buf.read(72))
        self.enable = [bool(x) for x in struct.unpack('>18b', buf.read(18))]
        self.calibrate = [bool(x) for x in struct.unpack('>18b', buf.read(18))]
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if low_cmd_t in parents: return 0
        tmphash = (0x49280923d901fcdf) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if low_cmd_t._packed_fingerprint is None:
            low_cmd_t._packed_fingerprint = struct.pack(">Q", low_cmd_t._get_hash_recursive([]))
        return low_cmd_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", low_cmd_t._get_packed_fingerprint())[0]

